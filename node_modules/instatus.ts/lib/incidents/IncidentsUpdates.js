"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/restrict-template-expressions */
var __1 = require("../");
/**
 * The incident updates
 *
 * @export
 * @class IncidentsUpdates
 * @extends {Base}
 */
var IncidentsUpdates = /** @class */ (function (_super) {
    __extends(IncidentsUpdates, _super);
    /**
     * @param {InstatusClient} client The client that instantiated this
     * @param {string} incidentID The ID of the incident
     * @memberof IncidentsUpdates
     */
    function IncidentsUpdates(client, incidentID) {
        var _this = _super.call(this, client) || this;
        _this.incidentID = incidentID;
        return _this;
    }
    // GET /v1/:page_id/incidents/:incident_id/incident-updates/:incident_update_id
    /**
     * Gets an incident update
     *
     * @param {string} incidentUpdateId The incident update ID
     * @return {*}  {Promise<AxiosResponse<IncidentUpdate>>}
     * @memberof IncidentsUpdates
     */
    IncidentsUpdates.prototype.get = function (incidentUpdateId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._check();
                        return [4 /*yield*/, this.request('get', this.client.pageID + "/incidents/" + this.incidentID + "/incident-updates/" + incidentUpdateId)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // POST /v1/:page_id/incidents/:incident_id/incident-updates
    /**
     * Adds an incident update
     *
     * @param {IncidentUpdatePost} data
     * @return {*}  {Promise<AxiosResponse<IncidentUpdate>>}
     * @memberof IncidentsUpdates
     */
    IncidentsUpdates.prototype.add = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._check();
                        return [4 /*yield*/, this.request('post', this.client.pageID + "/incidents/" + this.incidentID + "/incidents-updates", data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    // PUT /v1/:page_id/incidents/:incident_id/incident-updates/:incident_update_id
    /**
     * Updates an incident update
     *
     * @param {string} incidentUpdateID The incident update ID
     * @param {IncidentUpdatePut} data
     * @return {*}  {Promise<AxiosResponse<IncidentUpdate>>}
     * @memberof IncidentsUpdates
     */
    IncidentsUpdates.prototype.update = function (incidentUpdateID, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._check();
                        return [4 /*yield*/, this.request('put', this.client.pageID + "/incidents/" + this.incidentID + "/incident-updates/" + incidentUpdateID, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    IncidentsUpdates.prototype._check = function () {
        if (this.incidentID === undefined)
            throw Error('IncidentID undefined');
        if (this.client.pageID === undefined)
            throw Error('PageID undefined');
    };
    return IncidentsUpdates;
}(__1.Base));
exports.default = IncidentsUpdates;
