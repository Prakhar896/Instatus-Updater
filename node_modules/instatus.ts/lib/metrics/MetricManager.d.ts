import { Base } from '..';
import { MetricDataPoint, MetricDataPointPost, MetricPut } from '../utils/Typings';
import Metric from './Metric';
/**
 * A manager of the metrics
 *
 * @export
 * @class MetricManager
 * @extends {Base}
 */
export default class MetricManager extends Base {
    /**
     * Gets all metrics
     *
     * @return {*}  {Promise<Metric[]>}
     * @memberof MetricManager
     */
    getAll(): Promise<Metric[]>;
    /**
     * Gets one metric
     *
     * @param {string} metricID The metric ID
     * @return {*}  {Promise<Metric>}
     * @memberof MetricManager
     */
    get(metricID: string): Promise<Metric>;
    /**
     * Updates a metric
     *
     * @param {string} metricID The metric ID
     * @param {MetricPut} data The data to update
     * @return {*}  {Promise<Metric>}
     * @memberof MetricManager
     */
    update(metricID: string, data: MetricPut): Promise<Metric>;
    /**
     * Deletes a metric
     *
     * @param {string} metricID The metric ID
     * @return {*}  {Promise<Metric>}
     * @memberof MetricManager
     */
    delete(metricID: string): Promise<Metric>;
    /**
     * Adds a datapoint to a metric
     *
     * @param {string} metricID The metric ID
     * @param {MetricDataPointPost} data The data to add
     * @return {*}  {Promise<MetricDataPoint>}
     * @memberof MetricManager
     */
    add(metricID: string, data: MetricDataPointPost): Promise<MetricDataPoint>;
    /**
     * Adds multiple data to a metric
     *
     * @param {string} metricID The metric ID
     * @param {MetricDataPointPost[]} data The data to add
     * @return {*}  {Promise<MetricDataPointPost[]>}
     * @memberof MetricManager
     */
    adds(metricID: string, data: MetricDataPointPost[]): Promise<MetricDataPointPost[]>;
    private _check;
}
